"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3014],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6540);const l={},o=r.createContext(l);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},8969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"docfiles/cplusplus","title":"C++","description":"EOSCore was primarily made with Blueprints in mind and is not convenient to use in a C++ environment, there is also no benefit to using EOSCore in a C++ environment compared to Blueprints, however it is totally doable.","source":"@site/docs/docfiles/cplusplus.md","sourceDirName":"docfiles","slug":"/docfiles/cplusplus","permalink":"/docfiles/cplusplus","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"steamCoreSidebar","previous":{"title":"Commandline Arguments","permalink":"/docfiles/commandline_arguments"},"next":{"title":"Downloading EOS SDK","permalink":"/docfiles/downloading_sdk"}}');var l=t(4848),o=t(8453);const i={},s="C++",a={},c=[{value:"Project.Build.cs",id:"projectbuildcs",level:2},{value:"Project.Build.cs Example",id:"projectbuildcs-example",level:2},{value:"PlayerController",id:"playercontroller",level:2},{value:"PlayerController.h",id:"playercontrollerh",level:2},{value:"PlayerController.cpp",id:"playercontrollercpp",level:2},{value:"Example Project",id:"example-project",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"c",children:"C++"})}),"\n",(0,l.jsx)(n.p,{children:"EOSCore was primarily made with Blueprints in mind and is not convenient to use in a C++ environment, there is also no benefit to using EOSCore in a C++ environment compared to Blueprints, however it is totally doable."}),"\n",(0,l.jsx)(n.p,{children:"This example will show you a basic implementation and how to get started but also note that if you decide to use EOSCore in C++ you will be on your own. If you are having issues compiling your C++ project then you will have to solve the issues on your own. One of the reason for this is C++ is extremely compicated and complex and not what the plugin is advertised or even suggested to be used with."}),"\n",(0,l.jsx)(n.p,{children:"With that out of the way, let\u2019s get started!"}),"\n",(0,l.jsx)(n.h2,{id:"projectbuildcs",children:"Project.Build.cs"}),"\n",(0,l.jsxs)(n.p,{children:["Open up your projects ",(0,l.jsx)(n.strong,{children:"\\Source\\Project\\Project.Build.cs"})," file and add ",(0,l.jsx)(n.strong,{children:"\u201dEOSCore"}),"\u201d as a module dependency. Here is an example of what a Build.cs file can look like that incudes the EOSCore module"]}),"\n",(0,l.jsx)(n.h2,{id:"projectbuildcs-example",children:"Project.Build.cs Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:'using UnrealBuildTool;\r\n\r\npublic class SteamCPP : ModuleRules\r\n{\r\n   public SteamCPP(ReadOnlyTargetRules Target) : base(Target)\r\n   {\r\n      PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\r\n   \r\n      PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "SteamCore" });\r\n   }\r\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"playercontroller",children:"PlayerController"}),"\n",(0,l.jsx)(n.p,{children:"We\u2019re going to setup a basic test function that will attempt to Login using the EOS Connect Interface, here is an example of the Header and Source files:"}),"\n",(0,l.jsx)(n.h2,{id:"playercontrollerh",children:"PlayerController.h"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#pragma once\r\n\r\n#include "CoreMinimal.h"\r\n\r\n#include "Connect/EOSConnectTypes.h"\r\n#include "GameFramework/PlayerController.h"\r\n#include "BaseController.generated.h"\r\n\r\nUCLASS()\r\nclass ABaseController : public APlayerController\r\n{\r\n\tGENERATED_BODY()\r\n\r\npublic:\r\n\tUFUNCTION(BlueprintCallable, Category = "EOS TEST")\r\n\tvoid MyTestFunction();\r\n\r\npublic:\r\n\tUFUNCTION()\r\n\tvoid OnLoginCallback(const FEOSConnectLoginCallbackInfo& Data);\r\n\r\npublic:\r\n\tFOnLoginCallback m_OnLoginCallback;\r\n};\n'})}),"\n",(0,l.jsx)(n.h2,{id:"playercontrollercpp",children:"PlayerController.cpp"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include "BaseController.h"\r\n\r\n#include "Connect/EOSConnect.h"\r\n\r\nvoid ABaseController::MyTestFunction()\r\n{\r\n\tif (UCoreConnect* Connect = GetGameInstance()->GetSubsystem<UCoreConnect>())\r\n\t{\r\n\t\tm_OnLoginCallback.BindUFunction(this, "OnLoginCallback");\r\n\t\t\r\n\t\tFEOSConnectLoginOptions Options;\r\n\t\tOptions.UserLoginInfo.DisplayName = "Test";\r\n\t\tOptions.Credentials.Type = EEOSEExternalCredentialType::EOS_ECT_DEVICEID_ACCESS_TOKEN;\r\n\r\n\t\tConnect->EOSConnectLogin(this, Options, m_OnLoginCallback);\r\n\t}\r\n}\r\n\r\nvoid ABaseController::OnLoginCallback(const FEOSConnectLoginCallbackInfo& Data)\r\n{\r\n\tif (Data.ResultCode == EOSResult::EOS_Success)\r\n\t{\r\n\t\t// Login successful\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// Login failed\r\n\t}\r\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"Now it\u2019s simply a matter of calling the test function from Blueprints"}),"\n",(0,l.jsx)(n.h2,{id:"example-project",children:"Example Project"}),"\n",(0,l.jsx)(n.p,{children:"You can download this sample project from Github:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/eeldev-ue4/EOSCPP_Example",children:"https://github.com/eeldev-ue4/EOSCPP_Example"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);